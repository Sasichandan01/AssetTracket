openapi: "3.0.1"
info:
  title: "AssetTracker-API"
  version: "2025-05-21T09:25:32Z"
servers:
- url: "https://mz5d291z79.execute-api.us-east-1.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "s1"

x-amazon-apigateway-importexport-version: "1.0"
x-amazon-apigateway-binary-media-types:
  - "multipart/form-data"

x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
  Validate query string parameters and headers:
    validateRequestParameters: true
    validateRequestBody: false
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true

x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'*'"


paths:
  /groups:
    get:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Groups-Lambda/invocations"
      responses:
        "200":
          description: "Successfully retrieved groups"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupListResponse"
        "400":
          description: "Bad Request - Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    post:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Groups-Lambda/invocations"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupCreate"
      responses:
        "200":
          description: "Successfully created group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {"statusCode": 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - AssetTracker-authorizer: []
  /groups/{id}:
    get:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Groups-Lambda/invocations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDetails"
        "400":
          description: "Bad Request - Invalid group ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    put:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Groups-Lambda/invocations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "operation"
        in: "query"
        required: false
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupUpdate"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body or group ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    delete:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Groups-Lambda/invocations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid group ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {"statusCode": 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - AssetTracker-authorizer: []
  /assignment:
    get:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Assets-Lambda/invocations"
      responses:
        "200":
          description: "Successfully retrieved assignments"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentListResponse"
        "400":
          description: "Bad Request - Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    post:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Assets-Lambda/invocations"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignmentCreate"
      responses:
        "200":
          description: "Successfully created assignment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {"statusCode": 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - AssetTracker-authorizer: []
  /assignment/{id}:
    get:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Assets-Lambda/invocations"
      parameters:
      - name: "get-by"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentDetails"
        "400":
          description: "Bad Request - Invalid assignment ID or action"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {"statusCode": 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - AssetTracker-authorizer: []
  /users:
    get:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-UserManagement-Lambda/invocations"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        "400":
          description: "Bad Request - Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    post:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-UserManagement-Lambda/invocations"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {"statusCode": 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - AssetTracker-authorizer: []
  /users/{searchParam}:
    get:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-UserManagement-Lambda/invocations"
      parameters:
      - name: "searchParam"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "search-by"
        required: true
        in: "query"
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
        "400":
          description: "Bad Request - Invalid search parameter or action"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    put:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-UserManagement-Lambda/invocations"
      parameters:
      - name: "searchParam"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body or search parameter"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
       
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    delete:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-UserManagement-Lambda/invocations"
      parameters:
      - name: "searchParam"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body or search parameter"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
       
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {"statusCode": 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      parameters:
      - name: "searchParam"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - AssetTracker-authorizer: []
  /users/role/{userName}:
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {"statusCode": 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      parameters:
      - name: "userName"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
    patch:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-UserManagement-Lambda/invocations"
      parameters:
      - name: "userName"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "change-to"
        in: "query"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleChange"
      responses:
        "200":
          description: "Successfully updated user role"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body or user name"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
       
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
  /chat:
    post:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Chat-Lambda/invocations"
      parameters:
      - name: "help"
        in: "query"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatPrompt"
      responses:
        "200":
          description: "Successfully processed chat request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {"statusCode": 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - AssetTracker-authorizer: []
  /assets:
    get:
      parameters:
      - name: "asset-status"
        in: "query"
        required: true
        schema:
          type: "string" 
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Assets-Lambda/invocations"
      responses:
        "200":
          description: "Successfully retrieved assets"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetListResponse"
        "400":
          description: "Bad Request - Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    post:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Assets-Lambda/invocations"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetCreate"
      responses:
        "200":
          description: "Successfully created asset"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {"statusCode": 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - AssetTracker-authorizer: []
  /assets/{id}:
    get:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Assets-Lambda/invocations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "type"
        in: "query"
        required: true
        schema:
          type: "string" 
      responses:
        "200":
          description: "Successfully retrieved asset details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetDetails"
        "400":
          description: "Bad Request - Invalid asset ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    put:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Assets-Lambda/invocations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "operation"
        in: "query"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetUpdate"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body or asset ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    delete:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Assets-Lambda/invocations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "delete"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid asset ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {"statusCode": 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - AssetTracker-authorizer: []
  /comments/{id}:
    get:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Assets-Lambda/invocations"
      parameters:
      - name: "get-by"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successfully retrieved comment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentDetails"
        "400":
          description: "Bad Request - Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    post:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Assets-Lambda/invocations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentCreate"
      responses:
        "200":
          description: "Successfully created comment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    put:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Assets-Lambda/invocations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentUpdate"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body or asset ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    delete:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Assets-Lambda/invocations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid asset ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {"statusCode": 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - AssetTracker-authorizer: []
  /issues:
    get:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Issues-Lambda/invocations"
      parameters:
      - name: "type"
        in: "query"
        schema:
          type: "string"
      - name: "status"
        in: "query"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successfully retrieved issues"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueListResponse"
        "400":
          description: "Bad Request - Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    post:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Issues-Lambda/invocations"
      parameters:
      - name: "type"
        in: "query"
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssueCreate"
      responses:
        "200":
          description: "Successfully created issue"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {"statusCode": 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - AssetTracker-authorizer: []
  /issues/{id}:
    get:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Issues-Lambda/invocations"
      parameters:
      - name: "get-by"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "file-name"
        in: "query"
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successfully retrieved issue details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueDetails"
        "400":
          description: "Bad Request - Invalid issue ID or action"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    put:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Issues-Lambda/invocations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "update"
        in: "query"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssueUpdate"
      responses:
        "200":
          description: "Successfully updated issue"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid request body or issue ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    delete:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AssetTracker-Issues-Lambda/invocations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "type"
        in: "query"
        schema:
          type: "string"
      - name: "file-name"
        in: "query"
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: "Bad Request - Invalid issue ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - AssetTracker-authorizer: []
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {"statusCode": 200}
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - AssetTracker-authorizer: []

components:
  schemas:
    AssetCreate:
      type: object
      required:
        - AssetName
        - Category
        - Type
      properties:
        AssetName:
          type: string
        Category:
          type: string
        Type:
          type: string
        Cost:
          type: number
        ExpiryTime:
          type: string
        ServiceTime:
          type: string
        Metadata:
          type: object
          properties:
            OS:
              type: string
            Model:
              type: string
        Location:
          type: object
          properties:
            InOffice:
              type: object
              properties:
                Address:
                  type: string
                Date:
                  type: string
            OutOfOffice:
              type: object
              properties:
                Address:
                  type: string
                Date:
                  type: string

    AssetUpdate:
      type: object
      properties:
        AssetName:
          type: string
        Category:
          type: string
        Type:
          type: string
        AssetStatus:
          type: string
        Cost:
          type: number
        ExpiryTime:
          type: string
        ServiceTime:
          type: string
        Metadata:
          type: object
          properties:
            OS:
              type: string
            Model:
              type: string
        Location:
          type: object
          properties:
            InOffice:
              type: object
              properties:
                Address:
                  type: string
                Date:
                  type: string
            OutOfOffice:
              type: object
              properties:
                Address:
                  type: string
                Date:
                  type: string

    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
        body:
          type: string

    AssetListResponse:
      type: object
      properties:
        Response:
          type: array
          items:
            type: object
            properties:
              AssetId:
                type: string
              AssetName:
                type: string
              AssetStatus:
                type: string

    AssetDetails:
      type: object
      properties:
        AssetId:
          type: string
        AssetName:
          type: string
        Category:
          type: string
        Type:
          type: string
        AssetStatus:
          type: string
        Cost:
          type: number
        ExpiryTime:
          type: string
        ServiceTime:
          type: string
        Metadata:
          type: object
          properties:
            OS:
              type: string
            Model:
              type: string
        Location:
          type: object
          properties:
            InOffice:
              type: object
              properties:
                Address:
                  type: string
                Date:
                  type: string
            OutOfOffice:
              type: object
              properties:
                Address:
                  type: string
                Date:
                  type: string
        CreatedBy:
          type: string
        LastModifiedBy:
          type: string
        CreatedAt:
          type: string
        LastModifedAt:
          type: string

    CommentCreate:
      type: object
      required:
        - Comment
      properties:
        Comment:
          type: string

    CommentUpdate:
      type: object
      required:
        - Comment
      properties:
        Comment:
          type: string

    CommentDetails:
      type: object
      properties:
        CommentId:
          type: string
        Comment:
          type: string
        AssetId:
          type: string
        CreatedBy:
          type: string
        CreatedAt:
          type: string
        LastModifiedBy:
          type: string
        LastModifiedAt:
          type: string

    IssueCreate:
      type: object
      required:
        - IssueDescription
        - AssetId
      properties:
        IssueDescription:
          type: string
        AssetId:
          type: string

    IssueUpdate:
      type: object
      properties:
        IssueStatus:
          type: string
        Notes:
          type: string
        IssueDescription:
          type: string
        DeleteRequest:
          type: string
        IssuePriority:
          type: string
        IssueCost:
          type: string

    IssueListResponse:
      type: object
      properties:
        Response:
          type: array
          items:
            type: object
            properties:
              IssueId:
                type: string
              AssetId:
                type: string
              IssueDescription:
                type: string
              IssueStatus:
                type: string
              Notes:
                type: string

    IssueDetails:
      type: object
      properties:
        Issues:
          type: array
          items:
            type: object
            properties:
              IssueId:
                type: string
              AssetId:
                type: string
              IssueDescription:
                type: string
              CreatedBy:
                type: string
              CreatedAt:
                type: string
              IssueStatus:
                type: string
              LastModifedBy:
                type: string
              LastModifiedAt:
                type: string

    UserCreate:
      type: object
      required:
        - UserName
        - Email
        - RoleName
      properties:
        UserName:
          type: string
        Name:
          type: string
        Email:
          type: string
        Phone:
          type: string
        RoleName:
          type: string
        UserType: 
          type: string
        UserStatus:
          type: string

    UserUpdate:
      type: object
      properties:
        Name:
          type: string
        Phone:
          type: string
        Status:
          type: string

    UserListResponse:
      type: object
      properties:
        Response:
          type: array
          items:
            type: object
            properties:
              RoleName:
                type: string
              UserName:
                type: string

    UserDetails:
      type: object
      properties:
        RoleName:
          type: string
        UserName:
          type: string
        Email:
          type: string
        Phone:
          type: string
        CreatedBy:
          type: string
        CreatedAt:
          type: string
        LastModifiedBy:
          type: string
        LastModifiedAt:
          type: string

    AssignmentCreate:
      type: object
      required:
        - AssetId
        - HolderId
      properties:
        AssetId:
          type: string
        HolderId:
          type: string

    AssignmentListResponse:
      type: object
      properties:
        Response:
          type: array
          items:
            type: object
            properties:
              AssignmentId:
                type: string
              AssetId:
                type: string
              HolderId:
                type: string
              AssignmentStatus:
                type: string

    AssignmentDetails:
      type: object
      properties:
        Response:
          type: array
          items:
            type: object
            properties:
              AssignmentId:
                type: string
              AssetId:
                type: string
              HolderId:
                type: string
              CreatedAt:
                type: string
              CreatedBy:
                type: string
              AssignmentStatus:
                type: string

    GroupCreate:
      type: object
      properties:
        GroupName:
          type: string
        Users:
          type: array
          items:
            type: string
        GroupType:
          type: string
        TeamLead:
          type: string

    GroupListResponse:
      type: object
      properties:
        Response:
          type: array
          items:
            type: object
            properties:
              GroupId:
                type: string
              GroupName:
                type: string

    GroupDetails:
      type: object
      properties:
        GroupId:
          type: string
        GroupName:
          type: string
        Users:
          type: object
        CreatedBy:
          type: string
        CreatedAt:
          type: string
        LastModifiedBy:
          type: string
        LastModifiedAt:
          type: string

    GroupUpdate:
      type: object
      properties:
        GroupName:
          type: string
        Users:
          type: array
          items:
            type: string

    RoleChange:
      type: object
      required:
        - RoleName
      properties:
        RoleName:
          type: string

    ChatPrompt:
      type: object
      required:
        - Prompt
      properties:
        Prompt:
          type: string

    Empty:
      type: object
      properties: {}

  securitySchemes:
    AssetTracker-authorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "cognito_user_pools"
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - ${UserPoolArn}
